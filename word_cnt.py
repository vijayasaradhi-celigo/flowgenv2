# Step 1: Put the data into a list of tuples (num_words, count).
data = [
    (1, 12),
    (2, 1),
    (3, 1),
    (4, 14),
    (5, 4),
    (6, 449),
    (7, 5),
    (8, 41),
    (9, 19),
    (10, 5),
    (11, 7),
    (12, 16),
    (13, 11),
    (14, 7),
    (15, 48),
    (16, 19),
    (17, 5),
    (18, 19),
    (19, 4),
    (20, 31),
    (21, 15),
    (22, 7),
    (23, 4),
    (24, 6),
    (25, 18),
    (26, 7),
    (27, 23),
    (28, 26),
    (29, 44),
    (30, 11),
    (31, 5),
    (32, 21),
    (33, 13),
    (34, 27),
    (35, 46),
    (36, 5),
    (37, 52),
    (38, 19),
    (39, 16),
    (40, 10),
    (41, 48),
    (42, 93),
    (43, 25),
    (44, 13),
    (45, 14),
    (46, 42),
    (47, 25),
    (48, 149),
    (49, 38),
    (50, 7),
    (51, 51),
    (52, 9),
    (53, 23),
    (54, 96),
    (55, 25),
    (56, 74),
    (57, 8),
    (58, 21),
    (59, 265),
    (60, 94),
    (61, 197),
    (62, 89),
    (63, 127),
    (64, 702),
    (65, 243),
    (66, 341),
    (67, 761),
    (68, 980),
    (69, 775),
    (70, 282),
    (71, 555),
    (72, 763),
    (73, 568),
    (74, 331),
    (75, 392),
    (76, 528),
    (77, 87),
    (78, 994),
    (79, 169),
    (80, 331),
    (81, 181),
    (82, 111),
    (83, 70),
    (84, 141),
    (85, 102),
    (86, 508),
    (87, 92),
    (88, 91),
    (89, 302),
    (90, 123),
    (91, 227),
    (92, 136),
    (93, 84),
    (94, 256),
    (95, 244),
    (96, 43),
    (97, 123),
    (98, 166),
    (99, 731),
    (100, 17),
    (101, 177),
    (102, 197),
    (103, 315),
    (104, 8),
    (105, 12),
    (106, 258),
    (107, 164),
    (108, 24),
    (109, 218),
    (110, 37),
    (111, 3),
    (112, 120),
    (113, 9),
    (114, 114),
    (115, 45),
    (116, 12),
    (117, 58),
    (118, 14),
    (119, 5),
    (120, 227),
    (122, 19),
    (123, 6),
    (124, 2),
    (125, 117),
    (127, 2),
    (128, 73),
    (129, 35),
    (130, 108),
    (131, 125),
    (132, 52),
    (133, 4),
    (134, 25),
    (135, 20),
    (136, 14),
    (137, 17),
    (138, 10),
    (139, 2),
    (140, 9),
    (141, 3),
    (142, 4),
    (143, 110),
    (144, 12),
    (145, 88),
    (147, 1),
    (149, 13),
    (152, 69),
    (153, 27),
    (154, 2),
    (155, 1),
    (156, 10),
    (157, 173),
    (158, 56),
    (159, 29),
    (160, 12),
    (161, 2),
    (162, 9),
    (164, 242),
    (165, 6),
    (166, 2),
    (169, 50),
    (170, 6),
    (171, 1),
    (173, 27),
    (175, 2),
    (176, 4),
    (177, 23),
    (180, 9),
    (181, 2),
    (182, 13),
    (183, 2),
    (188, 2),
    (189, 17),
    (190, 175),
    (191, 2),
    (193, 9),
    (194, 4),
    (195, 1),
    (197, 9),
    (198, 4),
    (199, 36),
    (200, 12),
    (202, 96),
    (203, 81),
    (204, 2),
    (205, 2),
    (206, 2),
    (207, 25),
    (213, 1),
    (214, 21),
    (215, 90),
    (217, 1),
    (218, 12),
    (219, 2),
    (221, 2),
    (224, 3),
    (225, 4),
    (232, 37),
    (233, 4),
    (239, 1734),
    (242, 1),
    (243, 150),
    (245, 5),
    (246, 8),
    (248, 14),
    (252, 14),
    (253, 1),
    (255, 2),
    (257, 7623),
    (259, 12),
    (262, 8),
    (265, 56),
    (266, 2),
    (268, 2),
    (270, 25),
    (271, 1),
    (273, 59),
    (274, 55),
    (279, 14),
    (281, 2),
    (289, 117),
    (290, 39),
    (293, 1),
    (294, 3),
    (296, 2),
    (297, 24),
    (302, 1),
    (303, 52),
    (305, 91),
    (307, 31),
    (310, 67),
    (311, 14),
    (313, 17),
    (328, 1),
    (331, 1),
    (335, 27),
    (337, 26),
    (343, 1),
    (345, 1),
    (358, 1),
    (362, 2),
    (364, 1),
    (366, 81),
    (368, 1),
    (370, 1),
    (373, 2),
    (374, 1),
    (383, 2),
    (390, 16),
    (394, 2),
    (401, 91),
    (429, 2),
    (442, 1),
    (450, 91),
    (451, 1),
    (452, 3),
    (465, 16),
    (467, 94),
    (481, 99),
    (485, 1),
    (487, 1),
    (504, 85),
    (510, 1),
    (516, 221),
    (520, 1),
    (548, 24),
    (556, 12),
    (576, 3),
    (584, 1),
    (585, 2),
    (591, 1),
    (609, 1),
    (617, 2),
    (630, 3),
    (639, 95),
    (657, 16),
    (695, 1),
    (717, 6),
    (777, 2),
    (802, 2),
    (828, 6),
    (840, 6),
    (847, 5),
    (1074, 1),
    (1671, 3),
    (1683, 1),
    (1785, 6),
    (2098, 7),
    (2194, 4),
    (2478, 1),
    (2709, 2),
    (2861, 3),
    (2894, 1),
    (3185, 1),
    (5210, 1),
]

# Step 2: Calculate the total sum of counts.
total_count = sum(cnt for _, cnt in data)

# Step 3: Sort the data by num_words in ascending order (just in case it's not already).
data_sorted = sorted(data, key=lambda x: x[0])

# Step 4: Compute the cumulative sum until it reaches 90% of total_count.
threshold = 0.9 * total_count
cumulative = 0

for num_words, count in data_sorted:
    cumulative += count
    if cumulative >= threshold:
        print(f"The minimum num_words to cover 90% of the data is: {num_words}")
        break

